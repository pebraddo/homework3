---
title: "Control Flow Functions"
format: html
editor: visual
---

#### Powell Braddock - ST 558

Homework 3

September 10, 2025

Here we are loading in the `.rda` file that has a version of the list we created in the last part of the previous homework.

```{r}
load("hw2_list.rda")
```

# Task 1: Control Flow Practice

Now, we can use that loaded in file to see `bp_list` object in the environment. We want to add a column to the two data frames in this list object: `treatment` and `placebo`. Please note the `treatment` data frame has 20 subjects, while the `placebo` data frame has 10 subjects.

```{r}
bp_list$treatment$status <- character(20)
bp_list$placebo$status <- character(10)
```

Now, we are looking at the `treatment` data frame and creating a for loop that uses an if/then/else statement to assign a 'status' associated with each post-treatment blood pressure: optimal, borderline, and high.

```{r}
for(i in 1:20){
  if (bp_list$treatment$post_bp[i] <= 120)
    {bp_list$treatment$status[i] <- 'optimal'
  } else if (bp_list$treatment$post_bp[i] > 130)
    {bp_list$treatment$status[i] <- 'high'
  } else if (bp_list$treatment$post_bp[i] > 120 & bp_list$treatment$post_bp[i] <= 130)
    {bp_list$treatment$status[i] <- 'borderline'
  }
}
bp_list$treatment
```

We do the same thing for the `placebo` data frame in the `bp_list` object.

```{r}
for(i in 1:10){
  if (bp_list$placebo$post_bp[i] <= 120)
    {bp_list$placebo$status[i] <- 'optimal'
  } else if (bp_list$placebo$post_bp[i] > 130)
    {bp_list$placebo$status[i] <- 'high'
  } else if (bp_list$placebo$post_bp[i] > 120 & bp_list$placebo$post_bp[i] <= 130)
    {bp_list$placebo$status[i] <- 'borderline'
  }
}
bp_list$placebo
```

# Task 2: Function Writing

Let's create a function called `my_function` that shows the statistic of interest for the data frames, with a default of calculating the data frames' mean.

```{r}
my_function <- function(list_of_dfs, stat = "mean"){
  my_function <- get(stat)
  treatment <- list_of_dfs[[1]]
  placebo <- list_of_dfs[[2]]
  vector_values <- c(my_function(treatment$pre), my_function(treatment$post), my_function(treatment$diff), my_function(placebo$pre), my_function(placebo$post), my_function(placebo$diff))
  names(vector_values) <- c(paste0("treatment_pre", stat),paste0("treatment_post", stat), paste0("treatment_diff", stat), paste0("placebo_pre", stat), paste0("placebo_post", stat), paste0("placebo_diff", stat))
  return(vector_values)
}
```

Here's the default use of the function on the `bp_list` we were working with.

```{r}
my_function(bp_list)
```

Now, we can test this function using other statistics of interest: variability, standard deviation, minimum, and maximum.

```{r}
my_function(bp_list, stat='var')
my_function(bp_list, stat='sd')
my_function(bp_list, stat='min')
my_function(bp_list, stat='max')
```
